'use strict';

function isPlainObject(value) {
  if (value === null || typeof value !== "object") {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  if (prototype !== null && prototype !== Object.prototype && Object.getPrototypeOf(prototype) !== null) {
    return false;
  }
  if (Symbol.iterator in value) {
    return false;
  }
  if (Symbol.toStringTag in value) {
    return Object.prototype.toString.call(value) === "[object Module]";
  }
  return true;
}

function _defu(baseObject, defaults, namespace = ".", merger) {
  if (!isPlainObject(defaults)) {
    return _defu(baseObject, {}, namespace, merger);
  }
  const object = Object.assign({}, defaults);
  for (const key in baseObject) {
    if (key === "__proto__" || key === "constructor") {
      continue;
    }
    const value = baseObject[key];
    if (value === null || value === void 0) {
      continue;
    }
    if (merger && merger(object, key, value, namespace)) {
      continue;
    }
    if (Array.isArray(value) && Array.isArray(object[key])) {
      object[key] = [...value, ...object[key]];
    } else if (isPlainObject(value) && isPlainObject(object[key])) {
      object[key] = _defu(
        value,
        object[key],
        (namespace ? `${namespace}.` : "") + key.toString(),
        merger
      );
    } else {
      object[key] = value;
    }
  }
  return object;
}
function createDefu(merger) {
  return (...arguments_) => (
    // eslint-disable-next-line unicorn/no-array-reduce
    arguments_.reduce((p, c) => _defu(p, c, "", merger), {})
  );
}
const defu = createDefu();

const SYMBOL_TABLE = {
  BACKQUOTE: "`",
  TILDE: "~",
  EXCLAM: "!",
  AT: "@",
  NUMBERSIGN: "#",
  DOLLAR: "$",
  PERCENT: "%",
  CARET: "^",
  AMPERSAND: "&",
  ASTERISK: "*",
  PARENLEFT: "(",
  PARENRIGHT: ")",
  MINUS: "-",
  UNDERSCORE: "_",
  EQUAL: "=",
  PLUS: "+",
  BRACKETLEFT: "[",
  BRACELEFT: "{",
  BRACKETRIGHT: "]",
  BRACERIGHT: "}",
  SEMICOLON: ";",
  COLON: ":",
  QUOTE: "'",
  DOUBLEQUOTE: '"',
  BACKSLASH: "\\",
  BAR: "|",
  COMMA: ",",
  LESS: "<",
  PERIOD: ".",
  GREATER: ">",
  SLASH: "/",
  QUESTION: "?",
  SPACE: " ",
  DOT: ".",
  HASH: "#"
};
const MappingChars2String = {
  "[": "_bl_",
  "]": "_br_",
  "(": "_pl_",
  ")": "_qr_",
  "#": "_h_",
  "!": "_i_",
  "/": "_s_",
  "\\": "_bs_",
  ".": "_d_",
  ":": "_c_",
  "%": "_p_",
  ",": "_co_",
  "'": "_q_",
  '"': "_dq_",
  "*": "_a_",
  "&": "_am_",
  "@": "_at_",
  "{": "_bal_",
  "}": "_bar_",
  // ' ': '_sp_',
  "+": "_plus_",
  // '-': '_m_',
  ";": "_se_",
  "<": "_l_",
  "~": "_t_",
  "=": "_e_",
  ">": "_g_",
  "?": "_qu_",
  "^": "_ca_",
  "`": "_bq_",
  "|": "_b_",
  "$": "_do_"
  // _: '_u_'
};
const MappingChars2StringEntries = Object.entries(MappingChars2String);
const SimpleMappingChars2String = {
  "[": "_",
  "]": "_",
  "(": "_",
  ")": "_",
  "{": "_",
  "}": "_",
  "+": "a",
  ",": "b",
  ":": "c",
  ".": "d",
  "=": "e",
  ";": "f",
  ">": "g",
  "#": "h",
  "!": "i",
  "@": "j",
  "^": "k",
  "<": "l",
  "*": "m",
  "&": "n",
  "?": "o",
  "%": "p",
  "'": "q",
  "$": "r",
  "/": "s",
  "~": "t",
  "|": "u",
  "`": "v",
  "\\": "w",
  '"': "x"
};
const SimpleMappingChars2StringEntries = Object.entries(SimpleMappingChars2String);

const MAX_ASCII_CHAR_CODE = 127;
function isAsciiNumber(code) {
  return code >= 48 && code <= 57;
}
function escape(selectors, options) {
  const { map, ignoreHead } = defu(options, {
    map: SimpleMappingChars2String
  });
  const sb = [...selectors];
  for (let i = 0; i < sb.length; i++) {
    const char = sb[i];
    const code = char.codePointAt(0);
    const isCodeExisted = code !== void 0;
    const hit = map[char];
    if (isCodeExisted) {
      if (code > MAX_ASCII_CHAR_CODE) {
        sb[i] = `u${Number(code).toString(16)}`;
      } else if (hit) {
        sb[i] = hit;
      } else if (!ignoreHead && i === 0) {
        if (isAsciiNumber(code)) {
          sb[i] = `_${char}`;
        } else if (char === "-") {
          const nextChar = sb[i + 1];
          if (nextChar) {
            const nextCharCode = nextChar.codePointAt(0);
            if (nextCharCode && isAsciiNumber(nextCharCode)) {
              sb[i] = `_${char}`;
            }
          } else if (nextChar === void 0) {
            sb[i] = `_${char}`;
          }
        }
      }
    }
  }
  return sb.join("");
}

exports.MappingChars2String = MappingChars2String;
exports.MappingChars2StringEntries = MappingChars2StringEntries;
exports.SYMBOL_TABLE = SYMBOL_TABLE;
exports.SimpleMappingChars2String = SimpleMappingChars2String;
exports.SimpleMappingChars2StringEntries = SimpleMappingChars2StringEntries;
exports.escape = escape;
exports.isAsciiNumber = isAsciiNumber;
