import type { Buffer } from 'node:buffer';
import type { sources } from 'webpack';
import { LRUCache } from 'lru-cache';
export interface HashMapValue {
    hash: string;
    changed: boolean;
}
export type HashMapKey = string | number;
export type CacheValue = sources.Source | string;
export interface ICreateCacheReturnType {
    hashMap: Map<HashMapKey, HashMapValue>;
    instance: LRUCache<string, CacheValue>;
    hasHashKey: (key: HashMapKey) => boolean;
    getHashValue: (key: HashMapKey) => HashMapValue | undefined;
    setHashValue: (key: HashMapKey, value: HashMapValue) => this['hashMap'];
    computeHash: (message: string | Buffer) => string;
    get: <V extends CacheValue = sources.Source>(key: string) => V | undefined;
    set: <V extends CacheValue = sources.Source>(key: string, value: V) => this['instance'];
    has: (key: string) => boolean;
    calcHashValueChanged: (key: HashMapKey, hash: string) => this;
    process: (key: string, callback: () => void | false | Promise<void | false>, fallback: () => void | {
        key: string;
        source: CacheValue;
    } | Promise<void | {
        key: string;
        source: CacheValue;
    }>) => void | Promise<void>;
}
export type ICreateCacheOptions = boolean;
declare function createCache(options?: ICreateCacheOptions): ICreateCacheReturnType;
export { createCache };
