import { g as getOptions } from './options-yXyCFCtr.mjs';
import 'lru-cache';
import 'md5';
import './defaults-5A8JI2hW.mjs';
import '@ast-core/escape';
import '@weapp-core/escape';
import './defu-n46TJT6t.mjs';
import 'magic-string';
import '@babel/generator';
import '@babel/traverse';
import '@babel/parser';
import 'consola';
import '@weapp-core/regex';
import './replace.mjs';
import './shared-COWjpokr.mjs';
import '@tailwindcss-mangle/shared';
import 'postcss';
import './index-BF8k8rHr.mjs';
import '@csstools/postcss-is-pseudo-class';
import 'postcss-rem-to-responsive-pixel';
import 'postcss-selector-parser';
import 'node:path';
import 'node:process';
import 'tailwindcss-patch';
import '@babel/types';
import 'htmlparser2';

function createContext(options = {}) {
    const opts = getOptions(options);
    const { templateHandler, styleHandler, patch, jsHandler, twPatcher } = opts;
    let runtimeSet = new Set();
    patch === null || patch === void 0 ? void 0 : patch();
    function transformWxss(rawCss, options) {
        return styleHandler(rawCss, Object.assign({
            isMainChunk: true,
        }, options));
    }
    function transformJs(rawJs, options = {}) {
        runtimeSet
            = options && options.runtimeSet
                ? options.runtimeSet
                : twPatcher.getClassSet();
        return jsHandler(rawJs, runtimeSet, options);
    }
    function transformWxml(rawWxml, options) {
        return templateHandler(rawWxml, Object.assign({
            runtimeSet,
        }, options));
    }
    return {
        transformWxss,
        transformWxml,
        transformJs,
    };
}

export { createContext };
