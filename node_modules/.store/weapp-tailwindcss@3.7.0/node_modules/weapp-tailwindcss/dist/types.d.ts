import type { GeneratorResult } from '@babel/generator';
import type { ParseError, ParserOptions } from '@babel/parser';
import type { ClassGenerator, IClassGeneratorOptions } from '@tailwindcss-mangle/shared';
import type { SourceMap } from 'magic-string';
import type { Document, Result as PostcssResult, Root, Rule } from 'postcss';
import type { Result } from 'postcss-load-config';
import type { UserDefinedOptions as rem2rpxOptions } from 'postcss-rem-to-responsive-pixel';
import type { ILengthUnitsPatchOptions, TailwindcssPatcher } from 'tailwindcss-patch';
import type { ICreateCacheReturnType } from './cache';
import type { IContext as PostcssContext } from './postcss/plugins/ctx';
import type { InjectPreflight } from './postcss/preflight';
type PostcssOptions = Partial<Omit<Result, 'file'>>;
export type ItemOrItemArray<T> = T | T[];
export type AppType = 'uni-app' | 'uni-app-vite' | 'taro' | 'remax' | 'rax' | 'native' | 'kbone' | 'mpx' | 'weapp-vite';
export interface IPropValue {
    prop: string;
    value: string;
}
export type CssPresetProps = string;
export type CssPreflightOptions = {
    [key: CssPresetProps]: string | number | boolean;
} | false;
export type RequiredStyleHandlerOptions = {
    isMainChunk?: boolean;
    cssInjectPreflight?: InjectPreflight;
    escapeMap?: Record<string, string>;
} & Pick<UserDefinedOptions, 'cssPreflightRange' | 'cssChildCombinatorReplaceValue' | 'injectAdditionalCssVarScope' | 'cssSelectorReplacement' | 'rem2rpx'>;
export type CustomRuleCallback = (node: Rule, options: Readonly<RequiredStyleHandlerOptions>) => void;
export interface InternalCssSelectorReplacerOptions {
    mangleContext?: IMangleScopeContext;
    escapeMap?: Record<string, string>;
}
export type IStyleHandlerOptions = {
    customRuleCallback?: CustomRuleCallback;
    mangleContext?: IMangleScopeContext;
    ctx?: PostcssContext;
    postcssOptions?: PostcssOptions;
    cssRemoveHoverPseudoClass?: boolean;
} & RequiredStyleHandlerOptions;
export interface JsHandlerReplaceResult {
    code: string;
    map?: SourceMap;
}
export type JsHandlerResult = (JsHandlerReplaceResult | GeneratorResult) & {
    error?: ParseError;
};
export type ICustomAttributes = Record<string, ItemOrItemArray<string | RegExp>> | Map<string | RegExp, ItemOrItemArray<string | RegExp>>;
export type ICustomAttributesEntities = [string | RegExp, ItemOrItemArray<string | RegExp>][];
export interface IJsHandlerOptions {
    escapeMap?: Record<string, string>;
    classNameSet?: Set<string>;
    arbitraryValues?: IArbitraryValues;
    mangleContext?: IMangleScopeContext;
    jsPreserveClass?: (keyword: string) => boolean | undefined;
    needEscaped?: boolean;
    generateMap?: boolean;
    always?: boolean;
    jsAstTool?: 'babel' | 'ast-grep';
    unescapeUnicode?: boolean;
    babelParserOptions?: ParserOptions;
}
export interface RawSource {
    start: number;
    end: number;
    raw: string;
    source?: string;
}
export interface IMangleOptions {
    classGenerator?: IClassGeneratorOptions;
    mangleClassFilter?: (className: string) => boolean;
}
export interface IArbitraryValues {
    allowDoubleQuotes?: boolean;
}
export interface UserDefinedOptions {
    htmlMatcher?: (name: string) => boolean;
    cssMatcher?: (name: string) => boolean;
    jsMatcher?: (name: string) => boolean;
    mainCssChunkMatcher?: (name: string, appType?: AppType) => boolean;
    cssPreflight?: CssPreflightOptions;
    cssPreflightRange?: 'all';
    disabled?: boolean;
    customRuleCallback?: CustomRuleCallback;
    onLoad?: () => void;
    onStart?: () => void;
    onUpdate?: (filename: string, oldVal: string, newVal: string) => void;
    onEnd?: () => void;
    customAttributes?: ICustomAttributes;
    customReplaceDictionary?: Record<string, string>;
    supportCustomLengthUnitsPatch?: ILengthUnitsPatchOptions | boolean;
    appType?: AppType;
    mangle?: boolean | IMangleOptions;
    arbitraryValues?: IArbitraryValues;
    cssChildCombinatorReplaceValue?: string | string[];
    wxsMatcher?: (name: string) => boolean;
    inlineWxs?: boolean;
    injectAdditionalCssVarScope?: boolean;
    jsPreserveClass?: (keyword: string) => boolean | undefined;
    disabledDefaultTemplateHandler?: boolean;
    runtimeLoaderPath?: string;
    cssSelectorReplacement?: {
        root?: string | string[] | false;
        universal?: string | string[] | false;
    };
    tailwindcssBasedir?: string;
    rem2rpx?: boolean | rem2rpxOptions;
    cache?: boolean | ICreateCacheReturnType;
    jsAstTool?: 'babel' | 'ast-grep';
    babelParserOptions?: ParserOptions;
    postcssOptions?: PostcssOptions;
    cssRemoveHoverPseudoClass?: boolean;
}
export interface JsHandler {
    (rawSource: string, set: Set<string>, options?: CreateJsHandlerOptions): JsHandlerResult | Promise<JsHandlerResult>;
    sync: (rawSource: string, set: Set<string>, options?: CreateJsHandlerOptions) => JsHandlerResult;
}
export interface IMangleScopeContext {
    rawOptions: UserDefinedOptions['mangle'];
    runtimeSet: Set<string>;
    classGenerator: ClassGenerator;
    filter: (className: string) => boolean;
    cssHandler: (rawSource: string) => string;
    jsHandler: (rawSource: string) => string;
    wxmlHandler: (rawSource: string) => string;
}
export interface ICommonReplaceOptions {
    keepEOL?: boolean;
    escapeMap?: Record<string, string>;
}
export interface ITemplateHandlerOptions extends ICommonReplaceOptions {
    customAttributesEntities?: ICustomAttributesEntities;
    escapeMap?: Record<string, string>;
    mangleContext?: IMangleScopeContext;
    inlineWxs?: boolean;
    jsHandler?: JsHandler;
    runtimeSet?: Set<string>;
    disabledDefaultTemplateHandler?: boolean;
    quote?: string | null;
    ignoreHead?: boolean;
}
export type InternalUserDefinedOptions = Required<Omit<UserDefinedOptions, 'supportCustomLengthUnitsPatch' | 'customReplaceDictionary' | 'cache'> & {
    supportCustomLengthUnitsPatch: ILengthUnitsPatchOptions | boolean;
    templateHandler: (rawSource: string, options?: ITemplateHandlerOptions) => Promise<string>;
    styleHandler: (rawSource: string, options?: IStyleHandlerOptions) => Promise<PostcssResult<Root | Document>>;
    jsHandler: JsHandler;
    escapeMap: Record<string, string>;
    patch: () => void;
    customReplaceDictionary: Record<string, string>;
    setMangleRuntimeSet: (runtimeSet: Set<string>) => void;
    cache: ICreateCacheReturnType;
    twPatcher: TailwindcssPatcher;
}>;
export type InternalPostcssOptions = Pick<UserDefinedOptions, 'cssMatcher' | 'mainCssChunkMatcher' | 'cssPreflight' | 'cssPreflightRange' | 'customRuleCallback' | 'disabled'>;
export interface IBaseWebpackPlugin {
    options: InternalUserDefinedOptions;
    appType?: AppType;
    apply: (compiler: any) => void;
}
export interface InternalPatchResult {
    dataTypes?: string;
    processTailwindFeatures?: string;
    plugin?: string;
}
export type CreateJsHandlerOptions = Omit<IJsHandlerOptions, 'classNameSet'>;
export {};
