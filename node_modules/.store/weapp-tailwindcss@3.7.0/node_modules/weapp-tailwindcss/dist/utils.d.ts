import type { InternalUserDefinedOptions } from './types';
export declare function isRegexp(value: unknown): boolean;
export declare function isMap(value: unknown): boolean;
export declare function regExpTest(arr: (string | RegExp)[] | undefined, str: string): boolean;
export declare function noop(): void;
export declare function groupBy<T>(arr: T[], cb: (arg: T) => string): Record<string, T[]>;
export declare function getGroupedEntries<T>(entries: [string, T][], options: InternalUserDefinedOptions): Record<"css" | "html" | "js" | "other", [string, T][]>;
export declare function removeExt(file: string): string;
export { default as defu } from 'defu';
export declare const defuOverrideArray: <Source extends {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, Defaults extends Array<{
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
} | (number | boolean | any[] | Record<never, any> | null | undefined)>>(source: Source, ...defaults: Defaults) => import("defu").Defu<Source, Defaults>;
