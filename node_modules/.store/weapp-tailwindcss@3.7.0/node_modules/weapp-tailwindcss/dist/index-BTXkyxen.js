'use strict';

var options = require('./options-Bv-1GQJY.js');
var index = require('./index-h2-ZMO3S.js');
var index$1 = require('./index-HC-Qkn0i.js');
var defaults = require('./defaults-CdqzSWsR.js');

const debug = index$1.createDebug();
function UnifiedViteWeappTailwindcssPlugin(options$1 = {}) {
    const opts = options.getOptions(options$1);
    const { disabled, onEnd, onLoad, onStart, onUpdate, templateHandler, styleHandler, patch, jsHandler, mainCssChunkMatcher, appType, setMangleRuntimeSet, cache, twPatcher, } = opts;
    if (disabled) {
        return;
    }
    patch === null || patch === void 0 ? void 0 : patch();
    onLoad();
    return {
        name: index.vitePluginName,
        enforce: 'post',
        generateBundle(_opt, bundle) {
            return options.__awaiter(this, void 0, void 0, function* () {
                debug('start');
                onStart();
                const entries = Object.entries(bundle);
                const groupedEntries = defaults.getGroupedEntries(entries, opts);
                const runtimeSet = twPatcher.getClassSet();
                setMangleRuntimeSet(runtimeSet);
                debug('get runtimeSet, class count: %d', runtimeSet.size);
                if (Array.isArray(groupedEntries.html)) {
                    let noCachedCount = 0;
                    for (let i = 0; i < groupedEntries.html.length; i++) {
                        const [file, originalSource] = groupedEntries.html[i];
                        const oldVal = originalSource.source.toString();
                        const hash = cache.computeHash(oldVal);
                        cache.calcHashValueChanged(file, hash);
                        yield cache.process(file, () => {
                            const source = cache.get(file);
                            if (source) {
                                originalSource.source = source;
                                debug('html cache hit: %s', file);
                            }
                            else {
                                return false;
                            }
                        }, () => options.__awaiter(this, void 0, void 0, function* () {
                            originalSource.source = yield templateHandler(oldVal, {
                                runtimeSet,
                            });
                            onUpdate(file, oldVal, originalSource.source);
                            debug('html handle: %s', file);
                            noCachedCount++;
                            return {
                                key: file,
                                source: originalSource.source,
                            };
                        }));
                    }
                    debug('html handle finish, total: %d, no-cached: %d', groupedEntries.html.length, noCachedCount);
                }
                if (Array.isArray(groupedEntries.js)) {
                    let noCachedCount = 0;
                    for (let i = 0; i < groupedEntries.js.length; i++) {
                        const [file, originalSource] = groupedEntries.js[i];
                        const rawSource = originalSource.code;
                        const hash = cache.computeHash(rawSource);
                        cache.calcHashValueChanged(file, hash);
                        yield cache.process(file, () => {
                            const source = cache.get(file);
                            if (source) {
                                originalSource.code = source;
                                debug('js cache hit: %s', file);
                            }
                            else {
                                return false;
                            }
                        }, () => options.__awaiter(this, void 0, void 0, function* () {
                            const mapFilename = `${file}.map`;
                            const hasMap = Boolean(bundle[mapFilename]);
                            const { code, map } = yield jsHandler(rawSource, runtimeSet, {
                                generateMap: hasMap,
                            });
                            originalSource.code = code;
                            onUpdate(file, rawSource, code);
                            debug('js handle: %s', file);
                            noCachedCount++;
                            if (hasMap && map) {
                                bundle[mapFilename].source = map.toString();
                            }
                            return {
                                key: file,
                                source: code,
                            };
                        }));
                    }
                    debug('js handle finish, total: %d, no-cached: %d', groupedEntries.js.length, noCachedCount);
                }
                if (Array.isArray(groupedEntries.css)) {
                    let noCachedCount = 0;
                    for (let i = 0; i < groupedEntries.css.length; i++) {
                        const [file, originalSource] = groupedEntries.css[i];
                        const rawSource = originalSource.source.toString();
                        const hash = cache.computeHash(rawSource);
                        cache.calcHashValueChanged(file, hash);
                        yield cache.process(file, () => {
                            const source = cache.get(file);
                            if (source) {
                                originalSource.source = source;
                                debug('css cache hit: %s', file);
                            }
                            else {
                                return false;
                            }
                        }, () => options.__awaiter(this, void 0, void 0, function* () {
                            const { css } = yield styleHandler(rawSource, {
                                isMainChunk: mainCssChunkMatcher(originalSource.fileName, appType),
                            });
                            originalSource.source = css;
                            onUpdate(file, rawSource, css);
                            debug('css handle: %s', file);
                            noCachedCount++;
                            return {
                                key: file,
                                source: css,
                            };
                        }));
                    }
                    debug('css handle finish, total: %d, no-cached: %d', groupedEntries.css.length, noCachedCount);
                }
                onEnd();
                debug('end');
            });
        },
    };
}

exports.UnifiedViteWeappTailwindcssPlugin = UnifiedViteWeappTailwindcssPlugin;
