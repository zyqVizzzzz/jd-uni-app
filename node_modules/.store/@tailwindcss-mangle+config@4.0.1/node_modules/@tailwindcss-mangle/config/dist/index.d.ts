import * as c12 from 'c12';
import { FilterPattern } from '@rollup/pluginutils';
import { IClassGeneratorOptions } from '@tailwindcss-mangle/shared';

interface ClassMapOutputOptions {
    enable?: boolean;
    filename?: string;
    loose?: boolean;
}
interface ClassMapOutputItem {
    before: string;
    after: string;
    usedBy: string[];
}
interface MangleUserConfig {
    mangleClassFilter?: (className: string) => boolean;
    classGenerator?: IClassGeneratorOptions;
    exclude?: FilterPattern;
    include?: FilterPattern;
    classListPath?: string;
    classMapOutput?: boolean | ClassMapOutputOptions | ((json: ClassMapOutputItem[]) => void);
    disabled?: boolean;
    preserveFunction?: string[];
}
interface PatchUserConfig {
    output?: {
        filename?: string;
        loose?: boolean;
        /**
         * @description remove * in output json
         */
        removeUniversalSelector?: boolean;
    };
    tailwindcss?: {
        cwd?: string;
        config?: string;
    };
}
interface UserConfig {
    patch?: PatchUserConfig;
    mangle?: MangleUserConfig;
}

declare function getConfig(cwd?: string): Promise<c12.ResolvedConfig<UserConfig, c12.ConfigLayerMeta>>;
declare const defineConfig: c12.DefineConfig<UserConfig, c12.ConfigLayerMeta>;
declare function initConfig(cwd: string): Promise<void>;

declare const configName = "tailwindcss-mangle";

declare function getDefaultPatchConfig(): PatchUserConfig;
declare function getDefaultMangleUserConfig(): MangleUserConfig;
declare function getDefaultUserConfig(): UserConfig;

export { type ClassMapOutputItem, type ClassMapOutputOptions, type MangleUserConfig, type PatchUserConfig, type UserConfig, configName, defineConfig, getConfig, getDefaultMangleUserConfig, getDefaultPatchConfig, getDefaultUserConfig, initConfig };
